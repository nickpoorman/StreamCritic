<script src="http://www.google.com/jsapi" type="text/javascript"></script> 
    <script type="text/javascript"> 
      google.load("swfobject", "2.1");
    </script>    
    <script type="text/javascript"> 
      /*
       * Chromeless player has no controls.
       */

      // Display all comments based on time
      function showComments(curTime){
        // check the hidden comments and display each if time
        $(".comment:hidden").each(function () {
            //if(console) { console.log($(this).data("tstamp") + " - " + curTime); } 
            if($(this).data("tstamp") <= curTime) { $(this).fadeIn(); }
        });
        $(".comment:visible").each(function () {
            if($(this).data("tstamp") > curTime) { $(this).fadeOut(); }
        });
      }
      
      // Update a particular HTML element with a new value
      function updateHTML(elmId, value) {
        document.getElementById(elmId).innerHTML = value;
      }

      function seek(time) {
        ytplayer.seekTo(time, true);
      }

      function frtToSt(time) {
        var min = Math.floor(time / 60);
        var sec = Math.floor(time - (min * 60));
        min = min.toString();
        sec = sec.toString();
        if(min.length < 2) { min = '0' + min; }
        if(sec.length < 2) { sec = '0' + sec; }
        return min + ':' + sec;
      }

      // Update the hidden form field
      function updateForm(formId, elmId, value) {
        oFormObject = document.forms[formId];
        oFormObject.elements[elmId].value = value;
      }
      
      // This function is called when an error is thrown by the player
      function onPlayerError(errorCode) {
        alert("An error occured of type:" + errorCode);
      }
      
      // This function is called when the player changes state
      function onPlayerStateChange(newState) {
        updateHTML("playerState", newState);
      }

      // update the player progress bar
      function updateProgressBar(cTime, dTime) {
        if(cTime < 0) { cTime = 0; }
        if(dTime < 0) { dTime = 0; }
        var ratio = cTime / dTime;
        $(".elapsed").width(ratio*100+'%');
      }
      
      // Display information about the current state of the player
      function updatePlayerInfo() {
        // Also check that at least one function exists since when IE unloads the
        // page, it will destroy the SWF before clearing the interval.
        if(ytplayer && ytplayer.getDuration) {
          updateHTML("videoDuration", ytplayer.getDuration());
          updateHTML("videoCurrentTime", ytplayer.getCurrentTime());
          updateHTML("bytesTotal", ytplayer.getVideoBytesTotal());
          updateHTML("startBytes", ytplayer.getVideoStartBytes());
          updateHTML("bytesLoaded", ytplayer.getVideoBytesLoaded());
          updateHTML("volume", ytplayer.getVolume());
          updateHTML("time", ytplayer.getCurrentTime());
          <% if logged_in?%>
          updateForm("new_tag", "tag_time", ytplayer.getCurrentTime());
          <% end %>
          showComments(ytplayer.getCurrentTime());
          updateProgressBar(ytplayer.getCurrentTime(), ytplayer.getDuration());
        }
      }
      
      // Allow the user to set the volume from 0-100
      function setVideoVolume() {
        var volume = parseInt(document.getElementById("volumeSetting").value);
        if(isNaN(volume) || volume < 0 || volume > 100) {
          alert("Please enter a valid volume between 0 and 100.");
        }
        else if(ytplayer){
          ytplayer.setVolume(volume);
        }
      }

      // Allow the user to set the CurrentTime from 0-100
      function setCurrentTime() {
        var currentTime = parseInt(document.getElementById("currentTimeSetting").value);
        if(isNaN(currentTime) || currentTime <= -1) {
          alert("Please enter a valid time.");
        }
        else if(ytplayer){
          ytplayer.seekTo(currentTime, true);
        }
      }

      
      function playVideo() {
        if (ytplayer) {
          ytplayer.playVideo();
        }
      }
      
      function pauseVideo() {
        if (ytplayer) {
          ytplayer.pauseVideo();
        }
      }
      
      function muteVideo() {
        if(ytplayer) {
          ytplayer.mute();
        }
      }
      
      function unMuteVideo() {
        if(ytplayer) {
          ytplayer.unMute();
        }
      }
      
      
      // This function is automatically called by the player once it loads
      function onYouTubePlayerReady(playerId) {
        ytplayer = document.getElementById("ytPlayer");
        // This causes the updatePlayerInfo function to be called every 250ms to
        // get fresh data from the player
        setInterval(updatePlayerInfo, 250);
        updatePlayerInfo();
        ytplayer.addEventListener("onStateChange", "onPlayerStateChange");
        ytplayer.addEventListener("onError", "onPlayerError");
        //Load an initial video into the player
        ytplayer.cueVideoById("<%= @you_tube_id %>");
      }
      
      // The "main method" of this sample. Called when someone clicks "Run".
      function loadPlayer() {
        // Lets Flash from another domain call JavaScript
        var params = { allowScriptAccess: "always" };
        // The element id of the Flash embed
        var atts = { id: "ytPlayer" };
        // All of the magic handled by SWFObject (http://code.google.com/p/swfobject/)
        swfobject.embedSWF("http://www.youtube.com/apiplayer?" +
                          "&enablejsapi=1&playerapiid=player1", 
                           "videoDiv", "640", "390", "8", null, null, params, atts);
      }
      function _run() {
        loadPlayer();
      }
      google.setOnLoadCallback(_run);
      </script> 
